<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fitfusion.mapper.FoodMapper">

    <!-- ResultMap: FoodDto 매핑 -->
    <!-- property="Dto 변수명" column="DB 변수명" 매핑 -->
    <resultMap id="foodResultMap" type="com.fitfusion.dto.FoodDto">
        <id property="foodId" column="FOOD_ID"/>
        <result property="foodCode" column="FOOD_CODE"/>
        <result property="foodBarcode" column="FOOD_BARCODE"/>
        <result property="foodName" column="FOOD_NAME"/>
        <result property="makerName" column="MAKER_NAME"/>
        <result property="foodGroupName" column="FOOD_GROUP_NAME"/>
        <result property="foodClassName" column="FOOD_CLASS_NAME"/>
        <result property="foodCat1Code" column="FOOD_CAT1_CODE"/>
        <result property="foodCat1Name" column="FOOD_CAT1_NAME"/>
        <result property="foodRefCode" column="FOOD_REF_CODE"/>
        <result property="foodRefName" column="FOOD_REF_NAME"/>
        <result property="foodCat2Code" column="FOOD_CAT2_CODE"/>
        <result property="foodCat2Name" column="FOOD_CAT2_NAME"/>
        <result property="foodServingSizeRaw" column="FOOD_SERVING_SIZE_RAW"/>
        <result property="foodServingSizeValue" column="FOOD_SERVING_SIZE_VALUE"/>
        <result property="foodServingUnitId" column="FOOD_SERVING_UNIT_ID"/>
        <result property="foodWeightRaw" column="FOOD_WEIGHT_RAW"/>
        <result property="foodWeightValue" column="FOOD_WEIGHT_VALUE"/>
        <result property="foodWeightUnitId" column="FOOD_WEIGHT_UNIT_ID"/>
        <result property="referenceIntake" column="REFERENCE_INTAKE"/>
        <result property="calories" column="CALORIES"/>
        <result property="carbohydrateG" column="CARBOHYDRATE_G"/>
        <result property="proteinG" column="PROTEIN_G"/>
        <result property="fatG" column="FAT_G"/>
        <result property="sugarG" column="SUGAR_G"/>
        <result property="sodiumMg" column="SODIUM_MG"/>
        <result property="cholesterolMg" column="CHOLESTEROL_MG"/>
        <result property="saturatedFatG" column="SATURATED_FAT_G"/>
        <result property="transFatG" column="TRANS_FAT_G"/>
        <result property="unsaturatedFatG" column="UNSATURATED_FAT_G"/>
        <result property="totalFattyAcidsG" column="TOTAL_FATTY_ACIDS_G"/>
        <result property="potassiumMg" column="POTASSIUM_MG"/>
        <result property="fiberG" column="FIBER_G"/>
        <result property="imageUrl" column="IMAGE_URL"/>
        <result property="isUserCreated" column="IS_USER_CREATED"/>
        <result property="createdByUserId" column="CREATED_BY_USER_ID"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="dataSourceName" column="DATA_SOURCE_NAME"/>
        <result property="originCountryName" column="ORIGIN_COUNTRY_NAME"/>
        <result property="isImported" column="IS_IMPORTED"/>
        <result property="ironMg" column="IRON_MG"/>
        <result property="calciumMg" column="CALCIUM_MG"/>
        <result property="vitaminCMg" column="VITAMIN_C_MG"/>
        <result property="sugarAlcoholG" column="SUGAR_ALCOHOL_G"/>
        <result property="caffeineMg" column="CAFFEINE_MG"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
        <result property="apiRecordUpdateDate" column="API_RECORD_UPDATED_DATE"/>
    </resultMap>

<!-- ★필드명 수정 끝나면 *부분 필드명으로 전부 채워넣기 -->
    <!-- 1. 전체 조회 -->
    <select id="findAll" resultMap="foodResultMap">
        SELECT
            f.*,
            u.FOOD_UNIT_SYMBOL
        FROM FITFUSION_FOOD_ITEMS f
                 LEFT JOIN FITFUSION_FOOD_UNITS u
                           ON f.FOOD_SERVING_UNIT_ID = u.FOOD_UNIT_ID
    </select>

    <!-- 2. 상세 조회 -->
    <select id="findFoodByIdWithUnit" parameterType="Integer" resultMap="foodResultMap">
        SELECT
            f.*,
            u.FOOD_UNIT_SYMBOL
        FROM FITFUSION_FOOD_ITEMS f
                 LEFT JOIN FITFUSION_FOOD_UNITS u
                           ON f.FOOD_SERVING_UNIT_ID = u.FOOD_UNIT_ID
        WHERE f.FOOD_ID = #{foodId}
    </select>

    <!-- 3. 키워드 검색 -->
    <select id="searchFoods" parameterType="String" resultMap="foodResultMap">
        SELECT
            f.*,
            u.FOOD_UNIT_SYMBOL
        FROM FITFUSION_FOOD_ITEMS f
                 LEFT JOIN FITFUSION_FOOD_UNITS u
                           ON f.FOOD_SERVING_UNIT_ID = u.FOOD_UNIT_ID
        WHERE f.FOOD_NAME LIKE '%' || #{keyword} || '%'
    </select>

    <!-- 4. 카테고리 검색 -->
    <select id="findByCategory" parameterType="String" resultMap="foodResultMap">
        SELECT
            f.*,
            u.FOOD_UNIT_SYMBOL
        FROM FITFUSION_FOOD_ITEMS f
                 LEFT JOIN FITFUSION_FOOD_UNITS u
                           ON f.FOOD_SERVING_UNIT_ID = u.FOOD_UNIT_ID
        WHERE f.FOOD_CAT1_CODE = #{foodCat1Code}
    </select>

    <!-- 5. 수입 여부 검색 -->
    <select id="findByImported" parameterType="String" resultMap="foodResultMap">
        SELECT
            f.*,
            u.FOOD_UNIT_SYMBOL
        FROM FITFUSION_FOOD_ITEMS f
                 LEFT JOIN FITFUSION_FOOD_UNITS u
                           ON f.FOOD_SERVING_UNIT_ID = u.FOOD_UNIT_ID
        WHERE f.IS_IMPORTED = #{isImported}
    </select>

    <!-- 6. 페이징 검색 -->
    <select id="searchFoodsByPaging" parameterType="map" resultMap="foodResultMap">
        SELECT
            f.*,
            u.FOOD_UNIT_SYMBOL
        FROM FITFUSION_FOOD_ITEMS f
                 LEFT JOIN FITFUSION_FOOD_UNITS u
                           ON f.FOOD_SERVING_UNIT_ID = u.FOOD_UNIT_ID
        WHERE f.FOOD_NAME LIKE '%' || #{keyword} || '%'
        OFFSET #{offset} ROWS FETCH NEXT #{pageSize} ROWS ONLY
    </select>

    <!-- 7. Count -->
    <select id="countFoodsByKeyword" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM FITFUSION_FOOD_ITEMS
        WHERE FOOD_NAME LIKE '%' || #{keyword} || '%'
    </select>

    <!-- 8. INSERT (API -> DB 저장용)
        FoodDto에 해당하는 컬럼들을 DB에 저장함
    -->
    <insert id="insertFood" parameterType="com.fitfusion.dto.FoodDto">
        INSERT INTO FITFUSION_FOOD_ITEMS (
        FOOD_ID,
        FOOD_CODE,
        FOOD_BARCODE,
        FOOD_NAME,
        MAKER_NAME,
        FOOD_GROUP_NAME,
        FOOD_CLASS_NAME,
        FOOD_CAT1_CODE,
        FOOD_CAT1_NAME,
        FOOD_REF_CODE,
        FOOD_REF_NAME,
        FOOD_CAT2_CODE,
        FOOD_CAT2_NAME,
        FOOD_SERVING_SIZE_RAW,
        FOOD_SERVING_SIZE_VALUE,
        FOOD_SERVING_UNIT_ID,
        FOOD_WEIGHT_RAW,
        FOOD_WEIGHT_VALUE,
        FOOD_WEIGHT_UNIT_ID,
        REFERENCE_INTAKE,
        CALORIES,
        CARBOHYDRATE_G,
        PROTEIN_G,
        FAT_G,
        SUGAR_G,
        FIBER_G,
        CALCIUM_MG,
        IRON_MG,
        POTASSIUM_MG,
        SODIUM_MG,
        VITAMIN_C_MG,
        CHOLESTEROL_MG,
        SATURATED_FAT_G,
        TRANS_FAT_G,
        UNSATURATED_FAT_G,
        TOTAL_FATTY_ACIDS_G,
        SUGAR_ALCOHOL_G,
        CAFFEINE_MG,
        ORIGIN_COUNTRY_NAME,
        IS_IMPORTED,
        IMAGE_URL,
        IS_USER_CREATED,
        CREATED_BY_USER_ID,
        DATA_SOURCE_NAME,
        API_RECORD_UPDATED_DATE,
        CREATED_DATE,
        UPDATED_DATE
        ) VALUES (
        FITFUSION_FOOD_ITEMS_SEQ.NEXTVAL,
        #{foodCode, jdbcType=VARCHAR},
        #{foodBarcode, jdbcType=VARCHAR},
        #{foodName, jdbcType=VARCHAR},
        #{makerName, jdbcType=VARCHAR},
        #{foodGroupName, jdbcType=VARCHAR},
        #{foodClassName, jdbcType=VARCHAR},
        #{foodCat1Code, jdbcType=VARCHAR},
        #{foodCat1Name, jdbcType=VARCHAR},
        #{foodRefCode, jdbcType=VARCHAR},
        #{foodRefName, jdbcType=VARCHAR},
        #{foodCat2Code, jdbcType=VARCHAR},
        #{foodCat2Name, jdbcType=VARCHAR},
        #{foodServingSizeRaw, jdbcType=VARCHAR},
        #{foodServingSizeValue, jdbcType=DOUBLE},
        #{foodServingUnitId, jdbcType=INTEGER},
        #{foodWeightRaw, jdbcType=VARCHAR},
        #{foodWeightValue, jdbcType=DOUBLE},
        #{foodWeightUnitId, jdbcType=INTEGER},
        #{referenceIntake, jdbcType=VARCHAR},
        #{calories, jdbcType=DOUBLE},
        #{carbohydrateG, jdbcType=DOUBLE},
        #{proteinG, jdbcType=DOUBLE},
        #{fatG, jdbcType=DOUBLE},
        #{sugarG, jdbcType=DOUBLE},
        #{fiberG, jdbcType=DOUBLE},
        #{calciumMg, jdbcType=DOUBLE},
        #{ironMg, jdbcType=DOUBLE},
        #{potassiumMg, jdbcType=DOUBLE},
        #{sodiumMg, jdbcType=DOUBLE},
        #{vitaminCMg, jdbcType=DOUBLE},
        #{cholesterolMg, jdbcType=DOUBLE},
        #{saturatedFatG, jdbcType=DOUBLE},
        #{transFatG, jdbcType=DOUBLE},
        #{unsaturatedFatG, jdbcType=DOUBLE},
        #{totalFattyAcidsG, jdbcType=DOUBLE},
        #{sugarAlcoholG, jdbcType=DOUBLE},
        #{caffeineMg, jdbcType=DOUBLE},
        #{originCountryName, jdbcType=VARCHAR},
        #{isImported, jdbcType=VARCHAR},
        #{imageUrl, jdbcType=VARCHAR},
        #{isUserCreated, jdbcType=VARCHAR},
        #{createdByUserId, jdbcType=INTEGER},
        #{dataSourceName, jdbcType=VARCHAR},
        #{apiRecordUpdateDate, jdbcType=DATE},
        #{createdDate, jdbcType=DATE},
        #{updatedDate, jdbcType=DATE}
        )
    </insert>

    <!--
     9. 중복 식품 검사 (FOOD_CODE 기준)
     - 해당 FOOD_CODE가 DB에 존재하는지 확인함
     - 존재 시 1 이상의 값 반환, 없으면 0
    -->
    <select id="existsByFoodCode" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM FITFUSION_FOOD_ITEMS
        WHERE FOOD_CODE = #{foodCode}
    </select>

    <!-- 10. UPDATE -->
    <update id="updateFood" parameterType="com.fitfusion.dto.FoodDto">
        UPDATE FITFUSION_FOOD_ITEMS
        SET
            FOOD_CODE = #{foodCode, jdbcType=VARCHAR},
            FOOD_BARCODE = #{foodBarcode, jdbcType=VARCHAR},
            FOOD_NAME = #{foodName, jdbcType=VARCHAR},
            MAKER_NAME = #{makerName, jdbcType=VARCHAR},
            FOOD_GROUP_NAME = #{foodGroupName, jdbcType=VARCHAR},
            FOOD_CLASS_NAME = #{foodClassName, jdbcType=VARCHAR},
            FOOD_CAT1_CODE = #{foodCat1Code, jdbcType=VARCHAR},
            FOOD_CAT1_NAME = #{foodCat1Name, jdbcType=VARCHAR},
            FOOD_REF_CODE = #{foodRefCode, jdbcType=VARCHAR},
            FOOD_REF_NAME = #{foodRefName, jdbcType=VARCHAR},
            FOOD_CAT2_CODE = #{foodCat2Code, jdbcType=VARCHAR},
            FOOD_CAT2_NAME = #{foodCat2Name, jdbcType=VARCHAR},
            FOOD_SERVING_SIZE_RAW = #{foodServingSizeRaw, jdbcType=VARCHAR},
            FOOD_SERVING_SIZE_VALUE = #{foodServingSizeValue, jdbcType=DECIMAL},
            FOOD_SERVING_UNIT_ID = #{foodServingUnitId, jdbcType=INTEGER},
            FOOD_WEIGHT_RAW = #{foodWeightRaw, jdbcType=VARCHAR},
            FOOD_WEIGHT_VALUE = #{foodWeightValue, jdbcType=DECIMAL},
            FOOD_WEIGHT_UNIT_ID = #{foodWeightUnitId, jdbcType=INTEGER},
            REFERENCE_INTAKE = #{referenceIntake, jdbcType=VARCHAR},
            CALORIES = #{calories, jdbcType=DECIMAL},
            CARBOHYDRATE_G = #{carbohydrateG, jdbcType=DECIMAL},
            PROTEIN_G = #{proteinG, jdbcType=DECIMAL},
            FAT_G = #{fatG, jdbcType=DECIMAL},
            SUGAR_G = #{sugarG, jdbcType=DECIMAL},
            FIBER_G = #{fiberG, jdbcType=DECIMAL},
            CALCIUM_MG = #{calciumMg, jdbcType=DECIMAL},
            IRON_MG = #{ironMg, jdbcType=DECIMAL},
            POTASSIUM_MG = #{potassiumMg, jdbcType=DECIMAL},
            SODIUM_MG = #{sodiumMg, jdbcType=DECIMAL},
            VITAMIN_C_MG = #{vitaminCMg, jdbcType=DECIMAL},
            CHOLESTEROL_MG = #{cholesterolMg, jdbcType=DECIMAL},
            SATURATED_FAT_G = #{saturatedFatG, jdbcType=DECIMAL},
            TRANS_FAT_G = #{transFatG, jdbcType=DECIMAL},
            UNSATURATED_FAT_G = #{unsaturatedFatG, jdbcType=DECIMAL},
            TOTAL_FATTY_ACIDS_G = #{totalFattyAcidsG, jdbcType=DECIMAL},
            SUGAR_ALCOHOL_G = #{sugarAlcoholG, jdbcType=DECIMAL},
            CAFFEINE_MG = #{caffeineMg, jdbcType=DECIMAL},
            ORIGIN_COUNTRY_NAME = #{originCountryName, jdbcType=VARCHAR},
            IS_IMPORTED = #{isImported, jdbcType=VARCHAR},
            IMAGE_URL = #{imageUrl, jdbcType=VARCHAR},
            IS_USER_CREATED = #{isUserCreated, jdbcType=VARCHAR},
            CREATED_BY_USER_ID = #{createdByUserId, jdbcType=INTEGER},
            DATA_SOURCE_NAME = #{dataSourceName, jdbcType=VARCHAR},
            API_RECORD_UPDATED_DATE = #{apiRecordUpdateDate, jdbcType=DATE},
            CREATED_DATE = #{createdDate, jdbcType=DATE},
            UPDATED_DATE = #{updatedDate, jdbcType=DATE}
        WHERE FOOD_ID = #{foodId, jdbcType=INTEGER}
    </update>

    <!-- 11. DELETE -->
    <delete id="deleteFood" parameterType="Integer">
        DELETE FROM FITFUSION_FOOD_ITEMS
        WHERE FOOD_ID = #{foodId, jdbcType=INTEGER}
    </delete>

    <!-- 12. 모든 FOOD_NAME 목록 -->
    <select id="findAllFoodNames" resultType="String">
        SELECT FOOD_NAME
        FROM FITFUSION_FOOD_ITEMS
    </select>

</mapper>
