<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fitfusion.mapper.MealRecordMapper">

    <select id="findByMealRecordId" parameterType="int" resultType="com.fitfusion.dto.MealRecordDto">
        SELECT
             MEAL_RECORD_ID AS mealRecordId
            , USER_ID AS userId
            , FOOD_ID AS foodId
            , MEAL_TIME AS mealTime
            , USER_INTAKE AS userIntake
            , RECORD_DATE AS recordDate
            , CREATED_DATE AS createdDate
            , UPDATED_DATE AS updatedDate
        FROM FITFUSION_MEAL_RECORDS
        WHERE MEAL_RECORD_ID = #{mealRecordId}
    </select>


    <!-- 특정 음식의 영양소(detail 뷰에 사용될 메소드) -->
    <select id="selectMealRecordDetailById" parameterType="int" resultType="com.fitfusion.dto.MealRecordDto">
        SELECT
            r.MEAL_RECORD_ID          AS mealRecordId,
            r.USER_ID                 AS userId,
            r.FOOD_ID                 AS foodId,
            r.MEAL_TIME               AS mealTime,
            r.USER_INTAKE             AS userIntake,
            r.RECORD_DATE             AS recordDate,

            f.FOOD_NAME               AS foodName,
            f.MAKER_NAME              AS makerName,
            f.FOOD_SERVING_SIZE_VALUE AS foodServingSizeValue,
            f.FOOD_SERVING_SIZE_UNIT  AS foodServingSizeUnit,
            f.FOOD_WEIGHT_VALUE       AS foodWeightValue,
            f.FOOD_WEIGHT_UNIT        AS foodWeightUnit,
            f.IMAGE_URL               AS imageUrl,

            f.CALORIES                AS calories,
            f.CARBOHYDRATE_G          AS carbohydrateG,
            f.PROTEIN_G               AS proteinG,
            f.FAT_G                   AS fatG,
            f.SUGAR_G                 AS sugarG,
            f.SUGAR_ALCOHOL_G         AS sugarAlcoholG,
            f.FIBER_G                 AS fiberG,
            f.SATURATED_FAT_G         AS saturatedFatG,
            f.TRANS_FAT_G             AS transFatG,
            f.CHOLESTEROL_MG          AS cholesterolMg,
            f.UNSATURATED_FAT_G       AS unsaturatedFatG,
            f.SODIUM_MG               AS sodiumMg,
            f.CAFFEINE_MG             AS caffeineMg,
            f.CALCIUM_MG              AS calciumMg

        FROM FITFUSION_MEAL_RECORDS r
                 JOIN FITFUSION_FOOD_ITEMS f ON r.FOOD_ID = f.FOOD_ID
        WHERE r.MEAL_RECORD_ID = #{mealRecordId}
    </select>

    <!--  특정 날짜 식단 기록 조회(해당 날짜에 기록된 모든 음식들, 기존에 영양소 정보가 없었으나 modal-detail-nutrient의 값을 js로 보여주기 위해 추가함) -->
    <select id="getMealRecordsByDate" resultType="com.fitfusion.dto.MealRecordDto">
        SELECT
            r.MEAL_RECORD_ID AS mealRecordId,
            r.USER_ID AS userId,
            r.FOOD_ID AS foodId,
            r.MEAL_TIME AS mealTime,
            r.USER_INTAKE AS userIntake,
            r.RECORD_DATE AS recordDate,
            r.CREATED_DATE AS createdDate,
            r.UPDATED_DATE AS updatedDate,
            f.FOOD_NAME AS foodName,
            f.IMAGE_URL AS imageUrl,
            f.FOOD_SERVING_SIZE_VALUE AS foodServingSizeValue,
            f.FOOD_SERVING_SIZE_UNIT AS foodServingSizeUnit,

            f.CALORIES                AS calories,
            f.CARBOHYDRATE_G          AS carbohydrateG,
            f.PROTEIN_G               AS proteinG,
            f.FAT_G                   AS fatG,
            f.SUGAR_G                 AS sugarG,
            f.SUGAR_ALCOHOL_G         AS sugarAlcoholG,
            f.FIBER_G                 AS fiberG,
            f.SATURATED_FAT_G         AS saturatedFatG,
            f.TRANS_FAT_G             AS transFatG,
            f.CHOLESTEROL_MG          AS cholesterolMg,
            f.UNSATURATED_FAT_G       AS unsaturatedFatG,
            f.SODIUM_MG               AS sodiumMg,
            f.CAFFEINE_MG             AS caffeineMg,
            f.CALCIUM_MG              AS calciumMg

        FROM FITFUSION_MEAL_RECORDS r
                 JOIN FITFUSION_FOOD_ITEMS f ON r.FOOD_ID = f.FOOD_ID
        WHERE r.USER_ID = #{userId}
          AND TRUNC(r.RECORD_DATE) = TRUNC(#{recordDate})
        ORDER BY r.MEAL_TIME ASC, r.MEAL_RECORD_ID ASC
    </select>

    <!--  특정 날짜 식단 기록 조회(영양소 포함) -->
    <select id="selectMealRecordsByMealTime" resultType="com.fitfusion.dto.MealRecordDto">
        SELECT
            r.MEAL_RECORD_ID AS mealRecordId,
            r.USER_ID AS userId,
            r.FOOD_ID AS foodId,
            r.MEAL_TIME AS mealTime,
            r.USER_INTAKE AS userIntake,
            r.RECORD_DATE AS recordDate,
            r.CREATED_DATE AS createdDate,
            r.UPDATED_DATE AS updatedDate,
            f.FOOD_NAME AS foodName,
            f.IMAGE_URL AS imageUrl,
            f.FOOD_SERVING_SIZE_VALUE AS foodServingSizeValue,
            f.FOOD_SERVING_SIZE_UNIT AS foodServingSizeUnit,

            f.CALORIES                AS calories,
            f.CARBOHYDRATE_G          AS carbohydrateG,
            f.PROTEIN_G               AS proteinG,
            f.FAT_G                   AS fatG,
            f.SUGAR_G                 AS sugarG,
            f.SUGAR_ALCOHOL_G         AS sugarAlcoholG,
            f.FIBER_G                 AS fiberG,
            f.SATURATED_FAT_G         AS saturatedFatG,
            f.TRANS_FAT_G             AS transFatG,
            f.CHOLESTEROL_MG          AS cholesterolMg,
            f.UNSATURATED_FAT_G       AS unsaturatedFatG,
            f.SODIUM_MG               AS sodiumMg,
            f.CAFFEINE_MG             AS caffeineMg,
            f.CALCIUM_MG              AS calciumMg

        FROM FITFUSION_MEAL_RECORDS r
                 JOIN FITFUSION_FOOD_ITEMS f ON r.FOOD_ID = f.FOOD_ID
        WHERE r.USER_ID = #{userId}
          AND TRUNC(r.RECORD_DATE) = TRUNC(#{recordDate})
          AND r.MEAL_TIME = #{mealTime}
        ORDER BY r.MEAL_TIME ASC, r.MEAL_RECORD_ID ASC
    </select>

    <!--  특정 날짜 영양소 합계 -->
    <select id="getTodayNutrientSummary" resultType="map">
        SELECT
        NVL(SUM(f.CALORIES), 0) AS calories,                 <!-- 열량 -->
        NVL(SUM(f.CARBOHYDRATE_G), 0) AS carbohydrateG,      <!-- 탄수화물 -->
        NVL(SUM(f.PROTEIN_G), 0) AS proteinG,                <!-- 단백질 -->
        NVL(SUM(f.FAT_G), 0) AS fatG,                        <!-- 지방 -->
        NVL(SUM(f.SUGAR_G), 0) AS sugarG,                    <!-- 당류 -->
        NVL(SUM(f.FIBER_G), 0) AS fiberG,                    <!-- 식이섬유 -->
        NVL(SUM(f.CALCIUM_MG), 0) AS calciumMg,              <!-- 칼슘 -->
        NVL(SUM(f.IRON_MG), 0) AS ironMg,                    <!-- 철 (Iron) -->
        NVL(SUM(f.POTASSIUM_MG), 0) AS potassiumMg,          <!-- 칼륨 -->
        NVL(SUM(f.SODIUM_MG), 0) AS sodiumMg,                <!-- 나트륨 -->
        NVL(SUM(f.VITAMIN_C_MG), 0) AS vitaminCMg,           <!-- 비타민 C -->
        NVL(SUM(f.CHOLESTEROL_MG), 0) AS cholesterolMg,      <!-- 콜레스테롤 -->
        NVL(SUM(f.SATURATED_FAT_G), 0) AS saturatedFatG,     <!-- 포화지방산 -->
        NVL(SUM(f.TRANS_FAT_G), 0) AS transFatG,             <!-- 트랜스지방산 -->
        NVL(SUM(f.UNSATURATED_FAT_G), 0) AS unsaturatedFatG, <!-- 총 불포화지방산 -->
        NVL(SUM(f.SUGAR_ALCOHOL_G), 0) AS sugarAlcoholG,     <!-- 당알콜 -->
        NVL(SUM(f.CAFFEINE_MG), 0) AS caffeineMg             <!-- 카페인 -->

        FROM FITFUSION_MEAL_RECORDS r
        JOIN FITFUSION_FOOD_ITEMS f ON r.FOOD_ID = f.FOOD_ID
        WHERE r.USER_ID = #{userId}
        AND TRUNC(r.RECORD_DATE) = TRUNC(#{recordDate})
    </select>

<!--    <select id="getTodayNutrientSummary" resultType="map">-->
<!--        SELECT-->
<!--            NVL(SUM(f.CALORIES), 0) AS totalCalories,-->
<!--            NVL(SUM(f.CARBOHYDRATE_G), 0) AS totalCarbs,-->
<!--            NVL(SUM(f.PROTEIN_G), 0) AS totalProtein,-->
<!--            NVL(SUM(f.FAT_G), 0) AS totalFat-->
<!--        FROM FITFUSION_MEAL_RECORDS r-->
<!--                 JOIN FITFUSION_FOOD_ITEMS f ON r.FOOD_ID = f.FOOD_ID-->
<!--        WHERE r.USER_ID = #{userId}-->
<!--          AND TRUNC(r.RECORD_DATE) = TRUNC(#{recordDate})-->
<!--    </select>-->

    <!--  섭취량 업데이트 -->
    <update id="updateIntake">
        UPDATE FITFUSION_MEAL_RECORDS
        SET USER_INTAKE = #{userIntake},
            UPDATED_DATE = SYSDATE
        WHERE MEAL_RECORD_ID = #{mealRecordId}
    </update>

    <!--  식단 기록 삭제 -->
    <delete id="deleteByMealRecordId" parameterType="int">
        DELETE FROM FITFUSION_MEAL_RECORDS
        WHERE MEAL_RECORD_ID = #{mealRecordId}
    </delete>

    <!--  단건 Insert -->
    <insert id="insertMealRecord" parameterType="com.fitfusion.dto.MealRecordDto">
        INSERT INTO FITFUSION_MEAL_RECORDS (
            MEAL_RECORD_ID,
            USER_ID,
            FOOD_ID,
            MEAL_TIME,
            USER_INTAKE,
            RECORD_DATE,
            CREATED_DATE,
            UPDATED_DATE
        ) VALUES (
                     FITFUSION_MEAL_RECORDS_SEQ.NEXTVAL,
                     #{userId},
                     #{foodId},
                     #{mealTime},
                     #{userIntake},
                     #{recordDate},
                     SYSDATE,
                     NULL
                 )
    </insert>

    <!--  다건 Insert
          List<MealRecordDto> 처리
    -->
    <insert id="insertMealRecords">
        INSERT ALL
        <foreach collection="mealRecords" item="r">
            INTO FITFUSION_MEAL_RECORDS (
            MEAL_RECORD_ID,
            USER_ID,
            FOOD_ID,
            MEAL_TIME,
            USER_INTAKE,
            RECORD_DATE,
            CREATED_DATE,
            UPDATED_DATE
            ) VALUES (
            FITFUSION_MEAL_RECORDS_SEQ.NEXTVAL,
            #{r.userId},
            #{r.foodId},
            #{r.mealTime, jdbcType=VARCHAR, typeHandler=org.apache.ibatis.type.EnumTypeHandler},
            #{r.userIntake, jdbcType=NUMERIC},
            #{r.recordDate, jdbcType=DATE},
            SYSDATE,
            NULL
            )
        </foreach>
        SELECT 1 FROM DUAL
    </insert>

</mapper>
