<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fitfusion.mapper.UserMapper">
    <!--
        int checkUsernameExists(String username);
    -->
    <select id="checkUsernameExists" resultType="int">
        SELECT CASE WHEN EXISTS (
            SELECT 1 FROM FITFUSION_USERS
            WHERE USERNAME = #{username}
        ) THEN 1 ELSE 0 END
        FROM DUAL
    </select>

    <!--
        int checkEmailExists(String email);
    -->
    <select id="checkEmailExists" resultType="int">
        SELECT CASE WHEN EXISTS (
            SELECT 1 FROM FITFUSION_USERS
            WHERE EMAIL = #{email}
        ) THEN 1 ELSE 0 END
        FROM DUAL
    </select>

    <!--
        void insertUser(User user);
    -->
    <insert id="insertUser" parameterType="User">
        <selectKey keyProperty="userId"
                   resultType="int"
                   order="BEFORE">
            SELECT FITFUSION_USER_SEQ.nextval
            FROM DUAL
        </selectKey>
        INSERT INTO FITFUSION_USERS
            ( USER_ID
            , USERNAME
            , PASSWORD
            , NAME
            , EMAIL
            , GENDER
            , HEIGHT
            , WEIGHT
            , BIRTH_DATE
            , EXPERIENCE_LEVEL
            )
        VALUES
            ( #{userId}
            , #{username}
            , #{password}
            , #{name}
            , #{email}
            , #{gender}
            , #{height}
            , #{weight}
            , #{birthDate}
            , #{experienceLevel}
            )
    </insert>
    
    <!--
        void insertUserRole(@Param("userId") int userId,
                        @Param("roleName") String roleName);
    -->
    <insert id="insertUserRole">
        INSERT INTO FITFUSION_USER_ROLES
            (USER_ID, ROLE_NAME)
        VALUES
            (#{userId}, #{roleName})
    </insert>

    <resultMap id="UserResultMapWithRoleNames" type="User">
        <id column="user_id" property="userId"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="name" property="name"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <result column="height" property="height"/>
        <result column="weight" property="weight"/>
        <result column="birth_date" property="birthDate"/>
        <result column="created_date" property="createdDate"/>
        <result column="updated_date" property="updatedDate"/>
        <result column="deleted" property="deleted" />
        <result column="deleted_date" property="deletedDate" />
        <result column="experience_level" property="experienceLevel"/>
        <collection property="roleNames"
                    column="user_id"
                    ofType="string"
                    select="getRoleNamesByUserId"/>
    </resultMap>

    <!--
        Optional<User> getUserWithRoleNames(Map<String, Object> condition);
            condition: {
                type: username 혹은 email,
                identifier: {username} 혹은 {email}
            }
    -->
    <select id="getUserWithRoleNames" parameterType="map"
        resultMap="UserResultMapWithRoleNames">
        SELECT
            USER_ID
             , USERNAME
             , PASSWORD
             , NAME
             , EMAIL
             , GENDER
             , HEIGHT
             , WEIGHT
             , BIRTH_DATE
             , CREATED_DATE
             , UPDATED_DATE
             , DELETED
             , DELETED_DATE
             , EXPERIENCE_LEVEL
        FROM
            FITFUSION_USERS
        WHERE
            <if test="'username'.equals(type)">
               USERNAME = #{identifier}
            </if>
            <if test="'email'.equals(type)">
               EMAIL = #{identifier}
            </if>
    </select>

    <!--
        List<String> getRoleNamesByUserId(int id);
    -->
    <select id="getRoleNamesByUserId">
        SELECT
            ROLE_NAME
        FROM
            FITFUSION_USER_ROLES
        where
            USER_ID = #{id}
    </select>

    <!--
        User getUserByUsername(String username);
    -->
    <select id="getUserByUsername" resultType="User">
        SELECT
            USER_ID
            , USERNAME
            , PASSWORD
            , NAME
            , EMAIL
            , GENDER
            , HEIGHT
            , WEIGHT
            , BIRTH_DATE        birthDate
            , DELETED
            , EXPERIENCE_LEVEL  experienceLevel
        FROM
            FITFUSION_USERS
        WHERE
            USERNAME = #{username}
    </select>

    <!--
        User getUserByEmail(String email);
    -->
    <select id="getUserByEmail" resultType="User">
        SELECT
            USER_ID
             , USERNAME
             , PASSWORD
             , NAME
             , EMAIL
             , GENDER
             , HEIGHT
             , WEIGHT
             , BIRTH_DATE       birthDate
             , DELETED
             , EXPERIENCE_LEVEL experienceLevel
        FROM
            FITFUSION_USERS
        WHERE
            EMAIL = #{email}
    </select>

    <!--
        User getUserById(int id);
    -->
    <select id="getUserById" resultType="User">
        SELECT
            USER_ID             userId
            , USERNAME
            , PASSWORD
            , NAME
            , EMAIL
            , GENDER
            , HEIGHT
            , WEIGHT
            , BIRTH_DATE        birthDate
            , EXPERIENCE_LEVEL  experienceLevel
        FROM
            FITFUSION_USERS
        WHERE
            USER_ID = #{id}
    </select>

    <!--
        User updateUser(User user);
    -->
    <update id="updateUser" parameterType="User">
        UPDATE
            FITFUSION_USERS
        SET
            EMAIL = #{email}
            , HEIGHT = #{height}
            , WEIGHT = #{weight}
            , BIRTH_DATE = #{birthDate}
            , UPDATED_DATE = SYSDATE
            , EXPERIENCE_LEVEL = #{experienceLevel}
        WHERE
            USER_ID = #{userId}
    </update>

    <!--
        void updateUserPassword(User user);
    -->
    <update id="updateUserPassword" parameterType="User">
        UPDATE
            FITFUSION_USERS
        SET
            PASSWORD = #{password}
        WHERE
            USER_ID = #{userId}
    </update>

</mapper>